/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Inventory);
  }
}(this, function(expect, Inventory) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Inventory.MFetchFileConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MFetchFileConfig', function() {
    it('should create an instance of MFetchFileConfig', function() {
      // uncomment below and update the code to test MFetchFileConfig
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be.a(Inventory.MFetchFileConfig);
    });

    it('should have the property fetchFileConfigID (base name: "fetchFileConfigID")', function() {
      // uncomment below and update the code to test the property fetchFileConfigID
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property tenantID (base name: "tenantID")', function() {
      // uncomment below and update the code to test the property tenantID
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property active (base name: "active")', function() {
      // uncomment below and update the code to test the property active
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property lastModified (base name: "lastModified")', function() {
      // uncomment below and update the code to test the property lastModified
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property emailList (base name: "emailList")', function() {
      // uncomment below and update the code to test the property emailList
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property refreshEnabled (base name: "refreshEnabled")', function() {
      // uncomment below and update the code to test the property refreshEnabled
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property refreshFileDescription (base name: "refreshFileDescription")', function() {
      // uncomment below and update the code to test the property refreshFileDescription
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property updateEnabled (base name: "updateEnabled")', function() {
      // uncomment below and update the code to test the property updateEnabled
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property updateFileDescription (base name: "updateFileDescription")', function() {
      // uncomment below and update the code to test the property updateFileDescription
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property ftpServer (base name: "ftpServer")', function() {
      // uncomment below and update the code to test the property ftpServer
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property ftpUsername (base name: "ftpUsername")', function() {
      // uncomment below and update the code to test the property ftpUsername
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property ftpPassword (base name: "ftpPassword")', function() {
      // uncomment below and update the code to test the property ftpPassword
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property ftpPort (base name: "ftpPort")', function() {
      // uncomment below and update the code to test the property ftpPort
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property ftpRemotePath (base name: "ftpRemotePath")', function() {
      // uncomment below and update the code to test the property ftpRemotePath
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property ftpRemotePathArchive (base name: "ftpRemotePathArchive")', function() {
      // uncomment below and update the code to test the property ftpRemotePathArchive
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property lockName (base name: "lockName")', function() {
      // uncomment below and update the code to test the property lockName
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property postProcessAction (base name: "postProcessAction")', function() {
      // uncomment below and update the code to test the property postProcessAction
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property useControlFile (base name: "useControlFile")', function() {
      // uncomment below and update the code to test the property useControlFile
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property multipleFiles (base name: "multipleFiles")', function() {
      // uncomment below and update the code to test the property multipleFiles
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property zeroOutNegatives (base name: "zeroOutNegatives")', function() {
      // uncomment below and update the code to test the property zeroOutNegatives
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property fieldNameMap (base name: "fieldNameMap")', function() {
      // uncomment below and update the code to test the property fieldNameMap
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property ignoreExtraFields (base name: "ignoreExtraFields")', function() {
      // uncomment below and update the code to test the property ignoreExtraFields
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property blankQuantityIsZero (base name: "blankQuantityIsZero")', function() {
      // uncomment below and update the code to test the property blankQuantityIsZero
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property csvDelimiter (base name: "csvDelimiter")', function() {
      // uncomment below and update the code to test the property csvDelimiter
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property exportAfterRefresh (base name: "exportAfterRefresh")', function() {
      // uncomment below and update the code to test the property exportAfterRefresh
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property postImportExportId (base name: "postImportExportId")', function() {
      // uncomment below and update the code to test the property postImportExportId
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

    it('should have the property postImportFtpId (base name: "postImportFtpId")', function() {
      // uncomment below and update the code to test the property postImportFtpId
      //var instane = new Inventory.MFetchFileConfig();
      //expect(instance).to.be();
    });

  });

}));
