/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateExportSettingsFTPRequest from '../model/CreateExportSettingsFTPRequest';
import CreateExportSettingsRequest from '../model/CreateExportSettingsRequest';
import CreateExportSettingsS3Request from '../model/CreateExportSettingsS3Request';
import ExportInventoryRequest from '../model/ExportInventoryRequest';
import ExportInventoryResponse from '../model/ExportInventoryResponse';
import ExportSettings from '../model/ExportSettings';
import UpdateExportSettingsFTPRequest from '../model/UpdateExportSettingsFTPRequest';
import UpdateExportSettingsFTPResponse from '../model/UpdateExportSettingsFTPResponse';
import UpdateExportSettingsRequest from '../model/UpdateExportSettingsRequest';
import UpdateExportSettingsResponse from '../model/UpdateExportSettingsResponse';
import UpdateExportSettingsS3Request from '../model/UpdateExportSettingsS3Request';
import UpdateExportSettingsS3Response from '../model/UpdateExportSettingsS3Response';

/**
* ExportInventoryController service.
* @module api/ExportInventoryControllerApi
* @version 5.0
*/
export default class ExportInventoryControllerApi {

    /**
    * Constructs a new ExportInventoryControllerApi. 
    * @alias module:api/ExportInventoryControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createExportSettings operation.
     * @callback module:api/ExportInventoryControllerApi~createExportSettingsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Export Settings
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/CreateExportSettingsRequest} createExportSettingsRequest Request to create a new Export Settings
     * @param {module:api/ExportInventoryControllerApi~createExportSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    createExportSettings(xVolTenant, createExportSettingsRequest, callback) {
      let postBody = createExportSettingsRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling createExportSettings");
      }
      // verify the required parameter 'createExportSettingsRequest' is set
      if (createExportSettingsRequest === undefined || createExportSettingsRequest === null) {
        throw new Error("Missing the required parameter 'createExportSettingsRequest' when calling createExportSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/export/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createExportSettingsFTP operation.
     * @callback module:api/ExportInventoryControllerApi~createExportSettingsFTPCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Export Settings FTP
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/CreateExportSettingsFTPRequest} createExportSettingsFTPRequest Request to create a new Export Settings FTP
     * @param {module:api/ExportInventoryControllerApi~createExportSettingsFTPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    createExportSettingsFTP(xVolTenant, createExportSettingsFTPRequest, callback) {
      let postBody = createExportSettingsFTPRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling createExportSettingsFTP");
      }
      // verify the required parameter 'createExportSettingsFTPRequest' is set
      if (createExportSettingsFTPRequest === undefined || createExportSettingsFTPRequest === null) {
        throw new Error("Missing the required parameter 'createExportSettingsFTPRequest' when calling createExportSettingsFTP");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v1/export/ftp/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createExportSettingsS3 operation.
     * @callback module:api/ExportInventoryControllerApi~createExportSettingsS3Callback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Export Settings S3
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/CreateExportSettingsS3Request} createExportSettingsS3Request Request to create a new Export Settings S3
     * @param {module:api/ExportInventoryControllerApi~createExportSettingsS3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    createExportSettingsS3(xVolTenant, createExportSettingsS3Request, callback) {
      let postBody = createExportSettingsS3Request;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling createExportSettingsS3");
      }
      // verify the required parameter 'createExportSettingsS3Request' is set
      if (createExportSettingsS3Request === undefined || createExportSettingsS3Request === null) {
        throw new Error("Missing the required parameter 'createExportSettingsS3Request' when calling createExportSettingsS3");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/v1/export/s3/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExportSettings operation.
     * @callback module:api/ExportInventoryControllerApi~deleteExportSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Export Settings
     * @param {Number} xVolTenant Tenant ID
     * @param {String} exportSettingsName Export Settings Name
     * @param {module:api/ExportInventoryControllerApi~deleteExportSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    deleteExportSettings(xVolTenant, exportSettingsName, callback) {
      let postBody = null;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling deleteExportSettings");
      }
      // verify the required parameter 'exportSettingsName' is set
      if (exportSettingsName === undefined || exportSettingsName === null) {
        throw new Error("Missing the required parameter 'exportSettingsName' when calling deleteExportSettings");
      }

      let pathParams = {
      };
      let queryParams = {
        'exportSettingsName': exportSettingsName
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/v1/export/{exportSettingsName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExportSettingsFTP operation.
     * @callback module:api/ExportInventoryControllerApi~deleteExportSettingsFTPCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Export Settings FTP. Not specifying exportSettingsFTPID deletes ALL ftp settings for the specified export settings.
     * @param {Number} xVolTenant Tenant ID
     * @param {String} exportSettingsName Export Settings Name
     * @param {String} exportSettingsFTPName Export Settings FTP Name
     * @param {module:api/ExportInventoryControllerApi~deleteExportSettingsFTPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    deleteExportSettingsFTP(xVolTenant, exportSettingsName, exportSettingsFTPName, callback) {
      let postBody = null;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling deleteExportSettingsFTP");
      }
      // verify the required parameter 'exportSettingsName' is set
      if (exportSettingsName === undefined || exportSettingsName === null) {
        throw new Error("Missing the required parameter 'exportSettingsName' when calling deleteExportSettingsFTP");
      }
      // verify the required parameter 'exportSettingsFTPName' is set
      if (exportSettingsFTPName === undefined || exportSettingsFTPName === null) {
        throw new Error("Missing the required parameter 'exportSettingsFTPName' when calling deleteExportSettingsFTP");
      }

      let pathParams = {
        'exportSettingsFTPName': exportSettingsFTPName
      };
      let queryParams = {
        'exportSettingsName': exportSettingsName
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/v1/export/ftp/{exportSettingsName}/{exportSettingsFTPName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExportSettingsS3 operation.
     * @callback module:api/ExportInventoryControllerApi~deleteExportSettingsS3Callback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Export Settings S3. Not specifying exportSettingsS3ID deletes ALL s3 settings for the specified export settings.
     * @param {Number} xVolTenant Tenant ID
     * @param {String} exportSettingsName Export Settings Name
     * @param {String} exportSettingsS3Name Export Settings S3 Name
     * @param {module:api/ExportInventoryControllerApi~deleteExportSettingsS3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    deleteExportSettingsS3(xVolTenant, exportSettingsName, exportSettingsS3Name, callback) {
      let postBody = null;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling deleteExportSettingsS3");
      }
      // verify the required parameter 'exportSettingsName' is set
      if (exportSettingsName === undefined || exportSettingsName === null) {
        throw new Error("Missing the required parameter 'exportSettingsName' when calling deleteExportSettingsS3");
      }
      // verify the required parameter 'exportSettingsS3Name' is set
      if (exportSettingsS3Name === undefined || exportSettingsS3Name === null) {
        throw new Error("Missing the required parameter 'exportSettingsS3Name' when calling deleteExportSettingsS3");
      }

      let pathParams = {
        'exportSettingsS3Name': exportSettingsS3Name
      };
      let queryParams = {
        'exportSettingsName': exportSettingsName
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/v1/export/s3/{exportSettingsName}/{exportSettingsS3Name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExportSettings operation.
     * @callback module:api/ExportInventoryControllerApi~getExportSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExportSettings>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an export settings
     * @param {Number} xVolTenant Tenant ID
     * @param {String} exportSettingsName Export Settings Name
     * @param {module:api/ExportInventoryControllerApi~getExportSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ExportSettings>}
     */
    getExportSettings(xVolTenant, exportSettingsName, callback) {
      let postBody = null;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling getExportSettings");
      }
      // verify the required parameter 'exportSettingsName' is set
      if (exportSettingsName === undefined || exportSettingsName === null) {
        throw new Error("Missing the required parameter 'exportSettingsName' when calling getExportSettings");
      }

      let pathParams = {
      };
      let queryParams = {
        'exportSettingsName': exportSettingsName
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ExportSettings];
      return this.apiClient.callApi(
        '/v1/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runExport operation.
     * @callback module:api/ExportInventoryControllerApi~runExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportInventoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run Export Settings Job
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/ExportInventoryRequest} exportInventoryRequest Request to run an inventory export
     * @param {module:api/ExportInventoryControllerApi~runExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportInventoryResponse}
     */
    runExport(xVolTenant, exportInventoryRequest, callback) {
      let postBody = exportInventoryRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling runExport");
      }
      // verify the required parameter 'exportInventoryRequest' is set
      if (exportInventoryRequest === undefined || exportInventoryRequest === null) {
        throw new Error("Missing the required parameter 'exportInventoryRequest' when calling runExport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExportInventoryResponse;
      return this.apiClient.callApi(
        '/v1/export/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExportSettings operation.
     * @callback module:api/ExportInventoryControllerApi~updateExportSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateExportSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Export Settings
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/UpdateExportSettingsRequest} updateExportSettingsRequest Request to update an existing Export Settings
     * @param {module:api/ExportInventoryControllerApi~updateExportSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateExportSettingsResponse}
     */
    updateExportSettings(xVolTenant, updateExportSettingsRequest, callback) {
      let postBody = updateExportSettingsRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling updateExportSettings");
      }
      // verify the required parameter 'updateExportSettingsRequest' is set
      if (updateExportSettingsRequest === undefined || updateExportSettingsRequest === null) {
        throw new Error("Missing the required parameter 'updateExportSettingsRequest' when calling updateExportSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateExportSettingsResponse;
      return this.apiClient.callApi(
        '/v1/export/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExportSettingsFTP operation.
     * @callback module:api/ExportInventoryControllerApi~updateExportSettingsFTPCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateExportSettingsFTPResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Export Settings FTP
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/UpdateExportSettingsFTPRequest} updateExportSettingsFTPRequest Request to update an existing Export Settings FTP
     * @param {module:api/ExportInventoryControllerApi~updateExportSettingsFTPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateExportSettingsFTPResponse}
     */
    updateExportSettingsFTP(xVolTenant, updateExportSettingsFTPRequest, callback) {
      let postBody = updateExportSettingsFTPRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling updateExportSettingsFTP");
      }
      // verify the required parameter 'updateExportSettingsFTPRequest' is set
      if (updateExportSettingsFTPRequest === undefined || updateExportSettingsFTPRequest === null) {
        throw new Error("Missing the required parameter 'updateExportSettingsFTPRequest' when calling updateExportSettingsFTP");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateExportSettingsFTPResponse;
      return this.apiClient.callApi(
        '/v1/export/ftp/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExportSettingsS3 operation.
     * @callback module:api/ExportInventoryControllerApi~updateExportSettingsS3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateExportSettingsS3Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Export Settings S3
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/UpdateExportSettingsS3Request} updateExportSettingsS3Request Request to update an existing Export Settings S3
     * @param {module:api/ExportInventoryControllerApi~updateExportSettingsS3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateExportSettingsS3Response}
     */
    updateExportSettingsS3(xVolTenant, updateExportSettingsS3Request, callback) {
      let postBody = updateExportSettingsS3Request;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling updateExportSettingsS3");
      }
      // verify the required parameter 'updateExportSettingsS3Request' is set
      if (updateExportSettingsS3Request === undefined || updateExportSettingsS3Request === null) {
        throw new Error("Missing the required parameter 'updateExportSettingsS3Request' when calling updateExportSettingsS3");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateExportSettingsS3Response;
      return this.apiClient.callApi(
        '/v1/export/s3/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
