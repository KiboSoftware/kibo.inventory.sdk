/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdjustRequest from '../model/AdjustRequest';
import DeleteItemRequest from '../model/DeleteItemRequest';
import DeleteItemResponse from '../model/DeleteItemResponse';
import InlineResponse404 from '../model/InlineResponse404';
import InventoryResponse from '../model/InventoryResponse';
import JobIDResponse from '../model/JobIDResponse';
import RefreshRequest from '../model/RefreshRequest';

/**
* ModifyInventoryController service.
* @module api/ModifyInventoryControllerApi
* @version 5.0
*/
export default class ModifyInventoryControllerApi {

    /**
    * Constructs a new ModifyInventoryControllerApi. 
    * @alias module:api/ModifyInventoryControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adjust operation.
     * @callback module:api/ModifyInventoryControllerApi~adjustCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobIDResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adjust Inventory
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/AdjustRequest} adjustRequest Request to adjust inventory
     * @param {module:api/ModifyInventoryControllerApi~adjustCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobIDResponse}
     */
    adjust(xVolTenant, adjustRequest, callback) {
      let postBody = adjustRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling adjust");
      }
      // verify the required parameter 'adjustRequest' is set
      if (adjustRequest === undefined || adjustRequest === null) {
        throw new Error("Missing the required parameter 'adjustRequest' when calling adjust");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobIDResponse;
      return this.apiClient.callApi(
        '/v5/inventory/adjust/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/ModifyInventoryControllerApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Inventory
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/DeleteItemRequest} deleteItemRequest Request to delete item(s)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.xVolSite Site ID
     * @param {module:api/ModifyInventoryControllerApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteItemResponse}
     */
    callDelete(xVolTenant, deleteItemRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteItemRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling callDelete");
      }
      // verify the required parameter 'deleteItemRequest' is set
      if (deleteItemRequest === undefined || deleteItemRequest === null) {
        throw new Error("Missing the required parameter 'deleteItemRequest' when calling callDelete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant,
        'x-vol-site': opts['xVolSite']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteItemResponse;
      return this.apiClient.callApi(
        '/v5/inventory/delete/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refresh operation.
     * @callback module:api/ModifyInventoryControllerApi~refreshCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobIDResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh Inventory
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/RefreshRequest} refreshRequest Request to refresh inventory
     * @param {module:api/ModifyInventoryControllerApi~refreshCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobIDResponse}
     */
    refresh(xVolTenant, refreshRequest, callback) {
      let postBody = refreshRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling refresh");
      }
      // verify the required parameter 'refreshRequest' is set
      if (refreshRequest === undefined || refreshRequest === null) {
        throw new Error("Missing the required parameter 'refreshRequest' when calling refresh");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobIDResponse;
      return this.apiClient.callApi(
        '/v5/inventory/refresh/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncAdjust operation.
     * @callback module:api/ModifyInventoryControllerApi~syncAdjustCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InventoryResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adjust Inventory - synchronous
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/AdjustRequest} adjustRequest Request to adjust inventory
     * @param {module:api/ModifyInventoryControllerApi~syncAdjustCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InventoryResponse>}
     */
    syncAdjust(xVolTenant, adjustRequest, callback) {
      let postBody = adjustRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling syncAdjust");
      }
      // verify the required parameter 'adjustRequest' is set
      if (adjustRequest === undefined || adjustRequest === null) {
        throw new Error("Missing the required parameter 'adjustRequest' when calling syncAdjust");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [InventoryResponse];
      return this.apiClient.callApi(
        '/v5/inventory/sync-adjust/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncRefresh operation.
     * @callback module:api/ModifyInventoryControllerApi~syncRefreshCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InventoryResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh Inventory - synchronous
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/RefreshRequest} refreshRequest Request to refresh inventory
     * @param {module:api/ModifyInventoryControllerApi~syncRefreshCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InventoryResponse>}
     */
    syncRefresh(xVolTenant, refreshRequest, callback) {
      let postBody = refreshRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling syncRefresh");
      }
      // verify the required parameter 'refreshRequest' is set
      if (refreshRequest === undefined || refreshRequest === null) {
        throw new Error("Missing the required parameter 'refreshRequest' when calling syncRefresh");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [InventoryResponse];
      return this.apiClient.callApi(
        '/v5/inventory/sync-refresh/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
