/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BaseResponse from '../model/BaseResponse';
import Bin from '../model/Bin';
import BinResponseModel from '../model/BinResponseModel';
import BinSearchRequest from '../model/BinSearchRequest';
import BinSearchResponse from '../model/BinSearchResponse';
import BinStatusModel from '../model/BinStatusModel';
import BinTypeModel from '../model/BinTypeModel';
import CreateBinRequest from '../model/CreateBinRequest';
import LoadBinInventoryRequest from '../model/LoadBinInventoryRequest';
import LoadBinInventoryResponse from '../model/LoadBinInventoryResponse';
import UpdateBinRequest from '../model/UpdateBinRequest';
import UpdateBinsRequest from '../model/UpdateBinsRequest';
import UpdateBinsResponse from '../model/UpdateBinsResponse';

/**
* BinController service.
* @module api/BinControllerApi
* @version 5.0
*/
export default class BinControllerApi {

    /**
    * Constructs a new BinControllerApi. 
    * @alias module:api/BinControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createBin operation.
     * @callback module:api/BinControllerApi~createBinCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a bin
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/CreateBinRequest} createBinRequest Request to create a new bin
     * @param {module:api/BinControllerApi~createBinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    createBin(xVolTenant, createBinRequest, callback) {
      let postBody = createBinRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling createBin");
      }
      // verify the required parameter 'createBinRequest' is set
      if (createBinRequest === undefined || createBinRequest === null) {
        throw new Error("Missing the required parameter 'createBinRequest' when calling createBin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/v1/bin/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBin operation.
     * @callback module:api/BinControllerApi~deleteBinCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a bin
     * @param {Number} xVolTenant Tenant ID
     * @param {Number} binId Id of bin to get
     * @param {Number} binName Bin Name
     * @param {String} locationCode Location Code
     * @param {module:api/BinControllerApi~deleteBinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponse}
     */
    deleteBin(xVolTenant, binId, binName, locationCode, callback) {
      let postBody = null;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling deleteBin");
      }
      // verify the required parameter 'binId' is set
      if (binId === undefined || binId === null) {
        throw new Error("Missing the required parameter 'binId' when calling deleteBin");
      }
      // verify the required parameter 'binName' is set
      if (binName === undefined || binName === null) {
        throw new Error("Missing the required parameter 'binName' when calling deleteBin");
      }
      // verify the required parameter 'locationCode' is set
      if (locationCode === undefined || locationCode === null) {
        throw new Error("Missing the required parameter 'locationCode' when calling deleteBin");
      }

      let pathParams = {
        'bin_id': binId
      };
      let queryParams = {
        'binName': binName,
        'locationCode': locationCode
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/v1/bin/{bin_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBin operation.
     * @callback module:api/BinControllerApi~getBinCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bin} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a bin
     * @param {Number} xVolTenant Tenant ID
     * @param {Number} binId Id of bin to get
     * @param {module:api/BinControllerApi~getBinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bin}
     */
    getBin(xVolTenant, binId, callback) {
      let postBody = null;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling getBin");
      }
      // verify the required parameter 'binId' is set
      if (binId === undefined || binId === null) {
        throw new Error("Missing the required parameter 'binId' when calling getBin");
      }

      let pathParams = {
        'bin_id': binId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Bin;
      return this.apiClient.callApi(
        '/v1/bin/{bin_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBinStatuses operation.
     * @callback module:api/BinControllerApi~getBinStatusesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BinStatusModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of bin statuses
     * @param {Number} xVolTenant Tenant ID
     * @param {module:api/BinControllerApi~getBinStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BinStatusModel>}
     */
    getBinStatuses(xVolTenant, callback) {
      let postBody = null;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling getBinStatuses");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BinStatusModel];
      return this.apiClient.callApi(
        '/v1/bin/binStatuses/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBinTypes operation.
     * @callback module:api/BinControllerApi~getBinTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BinTypeModel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of bin types
     * @param {Number} xVolTenant Tenant ID
     * @param {module:api/BinControllerApi~getBinTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BinTypeModel>}
     */
    getBinTypes(xVolTenant, callback) {
      let postBody = null;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling getBinTypes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BinTypeModel];
      return this.apiClient.callApi(
        '/v1/bin/binTypes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBins operation.
     * @callback module:api/BinControllerApi~getBinsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BinResponseModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of bins
     * @param {Number} xVolTenant Tenant ID
     * @param {Number} locationID Id of location
     * @param {Number} searchTerm Term to match in bins
     * @param {Object} opts Optional parameters
     * @param {Number} opts.perPage Results per page
     * @param {Number} opts.page Page to show
     * @param {module:api/BinControllerApi~getBinsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BinResponseModel}
     */
    getBins(xVolTenant, locationID, searchTerm, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling getBins");
      }
      // verify the required parameter 'locationID' is set
      if (locationID === undefined || locationID === null) {
        throw new Error("Missing the required parameter 'locationID' when calling getBins");
      }
      // verify the required parameter 'searchTerm' is set
      if (searchTerm === undefined || searchTerm === null) {
        throw new Error("Missing the required parameter 'searchTerm' when calling getBins");
      }

      let pathParams = {
      };
      let queryParams = {
        'locationID': locationID,
        'searchTerm': searchTerm,
        'perPage': opts['perPage'],
        'page': opts['page']
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BinResponseModel;
      return this.apiClient.callApi(
        '/v1/bin/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadInventory operation.
     * @callback module:api/BinControllerApi~loadInventoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoadBinInventoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Loads bin inventory for designated bins
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/LoadBinInventoryRequest} loadBinInventoryRequest Request to load bin inventory
     * @param {module:api/BinControllerApi~loadInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoadBinInventoryResponse}
     */
    loadInventory(xVolTenant, loadBinInventoryRequest, callback) {
      let postBody = loadBinInventoryRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling loadInventory");
      }
      // verify the required parameter 'loadBinInventoryRequest' is set
      if (loadBinInventoryRequest === undefined || loadBinInventoryRequest === null) {
        throw new Error("Missing the required parameter 'loadBinInventoryRequest' when calling loadInventory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoadBinInventoryResponse;
      return this.apiClient.callApi(
        '/v1/bin/loadInventory/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchBins operation.
     * @callback module:api/BinControllerApi~searchBinsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BinSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search bins for a inventory by bin name or any product identifier
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/BinSearchRequest} binSearchRequest Request to allocate inventory
     * @param {module:api/BinControllerApi~searchBinsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BinSearchResponse}
     */
    searchBins(xVolTenant, binSearchRequest, callback) {
      let postBody = binSearchRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling searchBins");
      }
      // verify the required parameter 'binSearchRequest' is set
      if (binSearchRequest === undefined || binSearchRequest === null) {
        throw new Error("Missing the required parameter 'binSearchRequest' when calling searchBins");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BinSearchResponse;
      return this.apiClient.callApi(
        '/v1/bin/searchInventory/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBin operation.
     * @callback module:api/BinControllerApi~updateBinCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bin} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the designated bin
     * @param {Number} xVolTenant Tenant ID
     * @param {Number} binId Id of bin to update
     * @param {module:model/UpdateBinRequest} updateBinRequest Request to update a bin
     * @param {module:api/BinControllerApi~updateBinCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bin}
     */
    updateBin(xVolTenant, binId, updateBinRequest, callback) {
      let postBody = updateBinRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling updateBin");
      }
      // verify the required parameter 'binId' is set
      if (binId === undefined || binId === null) {
        throw new Error("Missing the required parameter 'binId' when calling updateBin");
      }
      // verify the required parameter 'updateBinRequest' is set
      if (updateBinRequest === undefined || updateBinRequest === null) {
        throw new Error("Missing the required parameter 'updateBinRequest' when calling updateBin");
      }

      let pathParams = {
        'bin_id': binId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Bin;
      return this.apiClient.callApi(
        '/v1/bin/{bin_id}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBins operation.
     * @callback module:api/BinControllerApi~updateBinsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBinsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the designated bins
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/UpdateBinsRequest} updateBinsRequest Request to update multiple bins
     * @param {module:api/BinControllerApi~updateBinsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBinsResponse}
     */
    updateBins(xVolTenant, updateBinsRequest, callback) {
      let postBody = updateBinsRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling updateBins");
      }
      // verify the required parameter 'updateBinsRequest' is set
      if (updateBinsRequest === undefined || updateBinsRequest === null) {
        throw new Error("Missing the required parameter 'updateBinsRequest' when calling updateBins");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBinsResponse;
      return this.apiClient.callApi(
        '/v1/bin/updateBins/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
