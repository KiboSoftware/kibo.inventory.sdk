/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateWaveRequest from '../model/CreateWaveRequest';
import CreateWaveResponse from '../model/CreateWaveResponse';
import InlineResponse404 from '../model/InlineResponse404';
import Wave from '../model/Wave';
import WaveCompletion from '../model/WaveCompletion';
import WaveSuggestionRequest from '../model/WaveSuggestionRequest';
import WaveSuggestionResponse from '../model/WaveSuggestionResponse';

/**
* WaveController service.
* @module api/WaveControllerApi
* @version 5.0
*/
export default class WaveControllerApi {

    /**
    * Constructs a new WaveControllerApi. 
    * @alias module:api/WaveControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the closePickWave operation.
     * @callback module:api/WaveControllerApi~closePickWaveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWaveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close Pick Wave (Complete)
     * @param {Number} xVolTenant Tenant ID
     * @param {Number} waveId Wave Identifier
     * @param {module:model/WaveCompletion} waveCompletion Request to complete a wave
     * @param {module:api/WaveControllerApi~closePickWaveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWaveResponse}
     */
    closePickWave(xVolTenant, waveId, waveCompletion, callback) {
      let postBody = waveCompletion;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling closePickWave");
      }
      // verify the required parameter 'waveId' is set
      if (waveId === undefined || waveId === null) {
        throw new Error("Missing the required parameter 'waveId' when calling closePickWave");
      }
      // verify the required parameter 'waveCompletion' is set
      if (waveCompletion === undefined || waveCompletion === null) {
        throw new Error("Missing the required parameter 'waveCompletion' when calling closePickWave");
      }

      let pathParams = {
        'wave_id': waveId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWaveResponse;
      return this.apiClient.callApi(
        '/v1/wave/{wave_id}/close/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPickWave operation.
     * @callback module:api/WaveControllerApi~createPickWaveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWaveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Pick Wave
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/CreateWaveRequest} createWaveRequest Request to create a new pick wave(s)
     * @param {module:api/WaveControllerApi~createPickWaveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWaveResponse}
     */
    createPickWave(xVolTenant, createWaveRequest, callback) {
      let postBody = createWaveRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling createPickWave");
      }
      // verify the required parameter 'createWaveRequest' is set
      if (createWaveRequest === undefined || createWaveRequest === null) {
        throw new Error("Missing the required parameter 'createWaveRequest' when calling createPickWave");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWaveResponse;
      return this.apiClient.callApi(
        '/v1/wave/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOpenPickWaves operation.
     * @callback module:api/WaveControllerApi~getOpenPickWavesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Wave>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Open Pick Waves
     * @param {Number} xVolTenant Tenant ID
     * @param {Number} locationId Location Identifier
     * @param {module:api/WaveControllerApi~getOpenPickWavesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Wave>}
     */
    getOpenPickWaves(xVolTenant, locationId, callback) {
      let postBody = null;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling getOpenPickWaves");
      }
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling getOpenPickWaves");
      }

      let pathParams = {
        'location_id': locationId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Wave];
      return this.apiClient.callApi(
        '/v1/wave/open/{location_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWaveDetails operation.
     * @callback module:api/WaveControllerApi~getWaveDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Wave} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Wave Details
     * @param {Number} xVolTenant Tenant ID
     * @param {Number} waveId Wave Identifier
     * @param {module:api/WaveControllerApi~getWaveDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Wave}
     */
    getWaveDetails(xVolTenant, waveId, callback) {
      let postBody = null;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling getWaveDetails");
      }
      // verify the required parameter 'waveId' is set
      if (waveId === undefined || waveId === null) {
        throw new Error("Missing the required parameter 'waveId' when calling getWaveDetails");
      }

      let pathParams = {
        'wave_id': waveId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Wave;
      return this.apiClient.callApi(
        '/v1/wave/{wave_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryWaveSuggestion operation.
     * @callback module:api/WaveControllerApi~queryWaveSuggestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WaveSuggestionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query Wave Suggestion (as a post)
     * @param {module:model/WaveSuggestionRequest} waveSuggestionRequest Request to query for a pick wave suggestion
     * @param {module:api/WaveControllerApi~queryWaveSuggestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WaveSuggestionResponse}
     */
    queryWaveSuggestion(waveSuggestionRequest, callback) {
      let postBody = waveSuggestionRequest;
      // verify the required parameter 'waveSuggestionRequest' is set
      if (waveSuggestionRequest === undefined || waveSuggestionRequest === null) {
        throw new Error("Missing the required parameter 'waveSuggestionRequest' when calling queryWaveSuggestion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WaveSuggestionResponse;
      return this.apiClient.callApi(
        '/v1/wave/suggestion/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
