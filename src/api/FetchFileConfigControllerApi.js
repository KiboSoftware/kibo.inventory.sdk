/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FetchFileConfigRequest from '../model/FetchFileConfigRequest';
import MFetchFileConfig from '../model/MFetchFileConfig';

/**
* FetchFileConfigController service.
* @module api/FetchFileConfigControllerApi
* @version 5.0
*/
export default class FetchFileConfigControllerApi {

    /**
    * Constructs a new FetchFileConfigControllerApi. 
    * @alias module:api/FetchFileConfigControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getFetchConfig operation.
     * @callback module:api/FetchFileConfigControllerApi~getFetchConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MFetchFileConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Fetch File Configs for the current tenant
     * @param {Number} xVolTenant Tenant ID
     * @param {module:api/FetchFileConfigControllerApi~getFetchConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MFetchFileConfig}
     */
    getFetchConfig(xVolTenant, callback) {
      let postBody = null;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling getFetchConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MFetchFileConfig;
      return this.apiClient.callApi(
        '/v1/config/fetchfile/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveFetchConfig operation.
     * @callback module:api/FetchFileConfigControllerApi~saveFetchConfigCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save a new Fetch File Config
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/FetchFileConfigRequest} fetchFileConfigRequest Request to fetch file configs
     * @param {module:api/FetchFileConfigControllerApi~saveFetchConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    saveFetchConfig(xVolTenant, fetchFileConfigRequest, callback) {
      let postBody = fetchFileConfigRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling saveFetchConfig");
      }
      // verify the required parameter 'fetchFileConfigRequest' is set
      if (fetchFileConfigRequest === undefined || fetchFileConfigRequest === null) {
        throw new Error("Missing the required parameter 'fetchFileConfigRequest' when calling saveFetchConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/v1/config/fetchfile/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
