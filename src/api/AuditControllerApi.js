/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Audit from '../model/Audit';
import AuditSearchRequest from '../model/AuditSearchRequest';
import AuditSearchResponse from '../model/AuditSearchResponse';
import BaseResponse from '../model/BaseResponse';
import CreateAuditRequest from '../model/CreateAuditRequest';
import InlineResponse404 from '../model/InlineResponse404';
import LoadBinInventoryRequest from '../model/LoadBinInventoryRequest';

/**
* AuditController service.
* @module api/AuditControllerApi
* @version 5.0
*/
export default class AuditControllerApi {

    /**
    * Constructs a new AuditControllerApi. 
    * @alias module:api/AuditControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelAudit operation.
     * @callback module:api/AuditControllerApi~cancelAuditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an audit
     * @param {Number} xVolTenant Tenant ID
     * @param {Number} auditId Id of audit
     * @param {module:api/AuditControllerApi~cancelAuditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseResponse}
     */
    cancelAudit(xVolTenant, auditId, callback) {
      let postBody = null;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling cancelAudit");
      }
      // verify the required parameter 'auditId' is set
      if (auditId === undefined || auditId === null) {
        throw new Error("Missing the required parameter 'auditId' when calling cancelAudit");
      }

      let pathParams = {
        'audit_id': auditId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/v1/audit/{audit_id}/cancel/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the completeAudit operation.
     * @callback module:api/AuditControllerApi~completeAuditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Audit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete an audit
     * @param {Number} xVolTenant Tenant ID
     * @param {Number} auditId Id of audit
     * @param {module:model/LoadBinInventoryRequest} loadBinInventoryRequest Request to load bin inventory
     * @param {module:api/AuditControllerApi~completeAuditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Audit}
     */
    completeAudit(xVolTenant, auditId, loadBinInventoryRequest, callback) {
      let postBody = loadBinInventoryRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling completeAudit");
      }
      // verify the required parameter 'auditId' is set
      if (auditId === undefined || auditId === null) {
        throw new Error("Missing the required parameter 'auditId' when calling completeAudit");
      }
      // verify the required parameter 'loadBinInventoryRequest' is set
      if (loadBinInventoryRequest === undefined || loadBinInventoryRequest === null) {
        throw new Error("Missing the required parameter 'loadBinInventoryRequest' when calling completeAudit");
      }

      let pathParams = {
        'audit_id': auditId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Audit;
      return this.apiClient.callApi(
        '/v1/audit/{audit_id}/complete/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAudit operation.
     * @callback module:api/AuditControllerApi~createAuditCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Audit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new audit
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/CreateAuditRequest} createAuditRequest Request to create an audit
     * @param {module:api/AuditControllerApi~createAuditCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Audit}
     */
    createAudit(xVolTenant, createAuditRequest, callback) {
      let postBody = createAuditRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling createAudit");
      }
      // verify the required parameter 'createAuditRequest' is set
      if (createAuditRequest === undefined || createAuditRequest === null) {
        throw new Error("Missing the required parameter 'createAuditRequest' when calling createAudit");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Audit;
      return this.apiClient.callApi(
        '/v1/audit/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuditDetails operation.
     * @callback module:api/AuditControllerApi~getAuditDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Audit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of the specified audit
     * @param {Number} xVolTenant Tenant ID
     * @param {Number} auditId Id of audit
     * @param {module:api/AuditControllerApi~getAuditDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Audit}
     */
    getAuditDetails(xVolTenant, auditId, callback) {
      let postBody = null;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling getAuditDetails");
      }
      // verify the required parameter 'auditId' is set
      if (auditId === undefined || auditId === null) {
        throw new Error("Missing the required parameter 'auditId' when calling getAuditDetails");
      }

      let pathParams = {
        'audit_id': auditId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Audit;
      return this.apiClient.callApi(
        '/v1/audit/{audit_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOpenAudits operation.
     * @callback module:api/AuditControllerApi~getOpenAuditsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Audit>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all of the open   audits at the given location
     * @param {Number} xVolTenant Tenant ID
     * @param {Number} locationId Id of location
     * @param {module:api/AuditControllerApi~getOpenAuditsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Audit>}
     */
    getOpenAudits(xVolTenant, locationId, callback) {
      let postBody = null;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling getOpenAudits");
      }
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling getOpenAudits");
      }

      let pathParams = {
        'location_id': locationId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Audit];
      return this.apiClient.callApi(
        '/v1/audit/allOpen/{location_code}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAudits operation.
     * @callback module:api/AuditControllerApi~searchAuditsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuditSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for a list of Audits
     * @param {Number} xVolTenant Tenant ID
     * @param {module:model/AuditSearchRequest} auditSearchRequest Request to search audits
     * @param {module:api/AuditControllerApi~searchAuditsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuditSearchResponse}
     */
    searchAudits(xVolTenant, auditSearchRequest, callback) {
      let postBody = auditSearchRequest;
      // verify the required parameter 'xVolTenant' is set
      if (xVolTenant === undefined || xVolTenant === null) {
        throw new Error("Missing the required parameter 'xVolTenant' when calling searchAudits");
      }
      // verify the required parameter 'auditSearchRequest' is set
      if (auditSearchRequest === undefined || auditSearchRequest === null) {
        throw new Error("Missing the required parameter 'auditSearchRequest' when calling searchAudits");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-vol-tenant': xVolTenant
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuditSearchResponse;
      return this.apiClient.callApi(
        '/v1/audit/search/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
