/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderItemInformationEvent from './OrderItemInformationEvent';

/**
 * The OrderItemInformation model module.
 * @module model/OrderItemInformation
 * @version 5.0
 */
class OrderItemInformation {
    /**
     * Constructs a new <code>OrderItemInformation</code>.
     * Order Item Information
     * @alias module:model/OrderItemInformation
     */
    constructor() { 
        
        OrderItemInformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderItemInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderItemInformation} obj Optional instance to populate.
     * @return {module:model/OrderItemInformation} The populated <code>OrderItemInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderItemInformation();

            if (data.hasOwnProperty('orderID')) {
                obj['orderID'] = ApiClient.convertToType(data['orderID'], 'Number');
            }
            if (data.hasOwnProperty('orderItemID')) {
                obj['orderItemID'] = ApiClient.convertToType(data['orderItemID'], 'Number');
            }
            if (data.hasOwnProperty('locationID')) {
                obj['locationID'] = ApiClient.convertToType(data['locationID'], 'Number');
            }
            if (data.hasOwnProperty('locationActive')) {
                obj['locationActive'] = ApiClient.convertToType(data['locationActive'], 'Boolean');
            }
            if (data.hasOwnProperty('locationCode')) {
                obj['locationCode'] = ApiClient.convertToType(data['locationCode'], 'Number');
            }
            if (data.hasOwnProperty('locationName')) {
                obj['locationName'] = ApiClient.convertToType(data['locationName'], 'String');
            }
            if (data.hasOwnProperty('binID')) {
                obj['binID'] = ApiClient.convertToType(data['binID'], 'Number');
            }
            if (data.hasOwnProperty('partNumber')) {
                obj['partNumber'] = ApiClient.convertToType(data['partNumber'], 'String');
            }
            if (data.hasOwnProperty('upc')) {
                obj['upc'] = ApiClient.convertToType(data['upc'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('ltd')) {
                obj['ltd'] = ApiClient.convertToType(data['ltd'], 'String');
            }
            if (data.hasOwnProperty('floor')) {
                obj['floor'] = ApiClient.convertToType(data['floor'], 'Number');
            }
            if (data.hasOwnProperty('safetyStock')) {
                obj['safetyStock'] = ApiClient.convertToType(data['safetyStock'], 'Number');
            }
            if (data.hasOwnProperty('onHand')) {
                obj['onHand'] = ApiClient.convertToType(data['onHand'], 'Number');
            }
            if (data.hasOwnProperty('available')) {
                obj['available'] = ApiClient.convertToType(data['available'], 'Number');
            }
            if (data.hasOwnProperty('allocated')) {
                obj['allocated'] = ApiClient.convertToType(data['allocated'], 'Number');
            }
            if (data.hasOwnProperty('allocates')) {
                obj['allocates'] = ApiClient.convertToType(data['allocates'], 'Number');
            }
            if (data.hasOwnProperty('deallocates')) {
                obj['deallocates'] = ApiClient.convertToType(data['deallocates'], 'Number');
            }
            if (data.hasOwnProperty('fulfills')) {
                obj['fulfills'] = ApiClient.convertToType(data['fulfills'], 'Number');
            }
            if (data.hasOwnProperty('picks')) {
                obj['picks'] = ApiClient.convertToType(data['picks'], 'Number');
            }
            if (data.hasOwnProperty('pendingQuantity')) {
                obj['pendingQuantity'] = ApiClient.convertToType(data['pendingQuantity'], 'Number');
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [OrderItemInformationEvent]);
            }
        }
        return obj;
    }


}

/**
 * Order Identifier
 * @member {Number} orderID
 */
OrderItemInformation.prototype['orderID'] = undefined;

/**
 * Order Item Identifier
 * @member {Number} orderItemID
 */
OrderItemInformation.prototype['orderItemID'] = undefined;

/**
 * Location Identifier
 * @member {Number} locationID
 */
OrderItemInformation.prototype['locationID'] = undefined;

/**
 * Flag for whether the location is active
 * @member {Boolean} locationActive
 */
OrderItemInformation.prototype['locationActive'] = undefined;

/**
 * External Store Identifier
 * @member {Number} locationCode
 */
OrderItemInformation.prototype['locationCode'] = undefined;

/**
 * Location Name
 * @member {String} locationName
 */
OrderItemInformation.prototype['locationName'] = undefined;

/**
 * Bin Identifier
 * @member {Number} binID
 */
OrderItemInformation.prototype['binID'] = undefined;

/**
 * Part/Product Number
 * @member {String} partNumber
 */
OrderItemInformation.prototype['partNumber'] = undefined;

/**
 * Universal Product Code
 * @member {String} upc
 */
OrderItemInformation.prototype['upc'] = undefined;

/**
 * Stock Keeping Unit
 * @member {String} sku
 */
OrderItemInformation.prototype['sku'] = undefined;

/**
 * Custom field used for store prioritization
 * @member {String} ltd
 */
OrderItemInformation.prototype['ltd'] = undefined;

/**
 * Absolute minimum quantity of this item that should be in stock at any time
 * @member {Number} floor
 */
OrderItemInformation.prototype['floor'] = undefined;

/**
 * Quantity of this item the location wants to keep in stock to ensure stock isn't completely depleted
 * @member {Number} safetyStock
 */
OrderItemInformation.prototype['safetyStock'] = undefined;

/**
 * The quantity the location has in its possession
 * @member {Number} onHand
 */
OrderItemInformation.prototype['onHand'] = undefined;

/**
 * The quantity the location has that are available for purchase
 * @member {Number} available
 */
OrderItemInformation.prototype['available'] = undefined;

/**
 * The quantity the location has that are allocated
 * @member {Number} allocated
 */
OrderItemInformation.prototype['allocated'] = undefined;

/**
 * Total number of allocations
 * @member {Number} allocates
 */
OrderItemInformation.prototype['allocates'] = undefined;

/**
 * Total number of deallocations
 * @member {Number} deallocates
 */
OrderItemInformation.prototype['deallocates'] = undefined;

/**
 * Total number of fulfillments. Should never be greater than 1.
 * @member {Number} fulfills
 */
OrderItemInformation.prototype['fulfills'] = undefined;

/**
 * Total number of picks (WMS only)
 * @member {Number} picks
 */
OrderItemInformation.prototype['picks'] = undefined;

/**
 * Pending quantity (WMS only)
 * @member {Number} pendingQuantity
 */
OrderItemInformation.prototype['pendingQuantity'] = undefined;

/**
 * Order Identifier
 * @member {Array.<module:model/OrderItemInformationEvent>} events
 */
OrderItemInformation.prototype['events'] = undefined;






export default OrderItemInformation;

