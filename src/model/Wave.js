/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WaveContent from './WaveContent';

/**
 * The Wave model module.
 * @module model/Wave
 * @version 5.0
 */
class Wave {
    /**
     * Constructs a new <code>Wave</code>.
     * Wave Model
     * @alias module:model/Wave
     */
    constructor() { 
        
        Wave.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Wave</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Wave} obj Optional instance to populate.
     * @return {module:model/Wave} The populated <code>Wave</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Wave();

            if (data.hasOwnProperty('waveID')) {
                obj['waveID'] = ApiClient.convertToType(data['waveID'], 'Number');
            }
            if (data.hasOwnProperty('locationID')) {
                obj['locationID'] = ApiClient.convertToType(data['locationID'], 'Number');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('userID')) {
                obj['userID'] = ApiClient.convertToType(data['userID'], 'Number');
            }
            if (data.hasOwnProperty('orderType')) {
                obj['orderType'] = ApiClient.convertToType(data['orderType'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('contents')) {
                obj['contents'] = ApiClient.convertToType(data['contents'], [WaveContent]);
            }
            if (data.hasOwnProperty('recoveryWaveID')) {
                obj['recoveryWaveID'] = ApiClient.convertToType(data['recoveryWaveID'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Wave Identifier
 * @member {Number} waveID
 */
Wave.prototype['waveID'] = undefined;

/**
 * Location Identifier
 * @member {Number} locationID
 */
Wave.prototype['locationID'] = undefined;

/**
 * When the wave was created
 * @member {String} created
 */
Wave.prototype['created'] = undefined;

/**
 * User Identifier for the wave creator
 * @member {Number} userID
 */
Wave.prototype['userID'] = undefined;

/**
 * Order Type of the wave
 * @member {module:model/Wave.OrderTypeEnum} orderType
 */
Wave.prototype['orderType'] = undefined;

/**
 * Type of wave
 * @member {module:model/Wave.TypeEnum} type
 */
Wave.prototype['type'] = undefined;

/**
 * Status of the wave
 * @member {module:model/Wave.StatusEnum} status
 */
Wave.prototype['status'] = undefined;

/**
 * List of Wave Contents
 * @member {Array.<module:model/WaveContent>} contents
 */
Wave.prototype['contents'] = undefined;

/**
 * Wave Recovery Identifier
 * @member {Number} recoveryWaveID
 */
Wave.prototype['recoveryWaveID'] = undefined;





/**
 * Allowed values for the <code>orderType</code> property.
 * @enum {String}
 * @readonly
 */
Wave['OrderTypeEnum'] = {

    /**
     * value: "ISPU"
     * @const
     */
    "ISPU": "ISPU",

    /**
     * value: "STH"
     * @const
     */
    "STH": "STH",

    /**
     * value: "TISPU"
     * @const
     */
    "TISPU": "TISPU",

    /**
     * value: "TRANSFER"
     * @const
     */
    "TRANSFER": "TRANSFER",

    /**
     * value: "DELIVERY"
     * @const
     */
    "DELIVERY": "DELIVERY"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Wave['TypeEnum'] = {

    /**
     * value: "NORMAL"
     * @const
     */
    "NORMAL": "NORMAL",

    /**
     * value: "SPECIAL"
     * @const
     */
    "SPECIAL": "SPECIAL",

    /**
     * value: "SINGLE"
     * @const
     */
    "SINGLE": "SINGLE",

    /**
     * value: "MULTIPLE"
     * @const
     */
    "MULTIPLE": "MULTIPLE"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Wave['StatusEnum'] = {

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "IN_PROGRESS"
     * @const
     */
    "IN_PROGRESS": "IN_PROGRESS",

    /**
     * value: "CLOSED"
     * @const
     */
    "CLOSED": "CLOSED",

    /**
     * value: "PENDING_RECOVERY"
     * @const
     */
    "PENDING_RECOVERY": "PENDING_RECOVERY"
};



export default Wave;

