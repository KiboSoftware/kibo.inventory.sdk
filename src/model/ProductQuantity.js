/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductQuantity model module.
 * @module model/ProductQuantity
 * @version 5.0
 */
class ProductQuantity {
    /**
     * Constructs a new <code>ProductQuantity</code>.
     * A product and its associated quantity
     * @alias module:model/ProductQuantity
     */
    constructor() { 
        
        ProductQuantity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductQuantity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductQuantity} obj Optional instance to populate.
     * @return {module:model/ProductQuantity} The populated <code>ProductQuantity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductQuantity();

            if (data.hasOwnProperty('partNumber')) {
                obj['partNumber'] = ApiClient.convertToType(data['partNumber'], 'String');
            }
            if (data.hasOwnProperty('upc')) {
                obj['upc'] = ApiClient.convertToType(data['upc'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('binID')) {
                obj['binID'] = ApiClient.convertToType(data['binID'], 'Number');
            }
            if (data.hasOwnProperty('locationID')) {
                obj['locationID'] = ApiClient.convertToType(data['locationID'], 'Number');
            }
            if (data.hasOwnProperty('binTypeID')) {
                obj['binTypeID'] = ApiClient.convertToType(data['binTypeID'], 'Number');
            }
            if (data.hasOwnProperty('binStatusID')) {
                obj['binStatusID'] = ApiClient.convertToType(data['binStatusID'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('inventoryID')) {
                obj['inventoryID'] = ApiClient.convertToType(data['inventoryID'], 'Number');
            }
            if (data.hasOwnProperty('tenantLocProductID')) {
                obj['tenantLocProductID'] = ApiClient.convertToType(data['tenantLocProductID'], 'Number');
            }
            if (data.hasOwnProperty('auditProductID')) {
                obj['auditProductID'] = ApiClient.convertToType(data['auditProductID'], 'Number');
            }
            if (data.hasOwnProperty('auditID')) {
                obj['auditID'] = ApiClient.convertToType(data['auditID'], 'Number');
            }
            if (data.hasOwnProperty('onHand')) {
                obj['onHand'] = ApiClient.convertToType(data['onHand'], 'Number');
            }
            if (data.hasOwnProperty('available')) {
                obj['available'] = ApiClient.convertToType(data['available'], 'Number');
            }
            if (data.hasOwnProperty('allocated')) {
                obj['allocated'] = ApiClient.convertToType(data['allocated'], 'Number');
            }
            if (data.hasOwnProperty('pending')) {
                obj['pending'] = ApiClient.convertToType(data['pending'], 'Number');
            }
            if (data.hasOwnProperty('ltd')) {
                obj['ltd'] = ApiClient.convertToType(data['ltd'], 'Number');
            }
            if (data.hasOwnProperty('floor')) {
                obj['floor'] = ApiClient.convertToType(data['floor'], 'Number');
            }
            if (data.hasOwnProperty('safetystock')) {
                obj['safetystock'] = ApiClient.convertToType(data['safetystock'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Part Number
 * @member {String} partNumber
 */
ProductQuantity.prototype['partNumber'] = undefined;

/**
 * UPC
 * @member {String} upc
 */
ProductQuantity.prototype['upc'] = undefined;

/**
 * SKU
 * @member {String} sku
 */
ProductQuantity.prototype['sku'] = undefined;

/**
 * Quantity of product
 * @member {Number} quantity
 */
ProductQuantity.prototype['quantity'] = undefined;

/**
 * ID of associated bin
 * @member {Number} binID
 */
ProductQuantity.prototype['binID'] = undefined;

/**
 * Location Identifier of the owning location
 * @member {Number} locationID
 */
ProductQuantity.prototype['locationID'] = undefined;

/**
 * Bin Type ID
 * @member {Number} binTypeID
 */
ProductQuantity.prototype['binTypeID'] = undefined;

/**
 * Bin Status ID
 * @member {Number} binStatusID
 */
ProductQuantity.prototype['binStatusID'] = undefined;

/**
 * Name of the product
 * @member {String} name
 */
ProductQuantity.prototype['name'] = undefined;

/**
 * Inventory ID
 * @member {Number} inventoryID
 */
ProductQuantity.prototype['inventoryID'] = undefined;

/**
 * Tenant Location Product ID
 * @member {Number} tenantLocProductID
 */
ProductQuantity.prototype['tenantLocProductID'] = undefined;

/**
 * Audit Product ID
 * @member {Number} auditProductID
 */
ProductQuantity.prototype['auditProductID'] = undefined;

/**
 * Audit ID
 * @member {Number} auditID
 */
ProductQuantity.prototype['auditID'] = undefined;

/**
 * Amount of product on hand
 * @member {Number} onHand
 */
ProductQuantity.prototype['onHand'] = undefined;

/**
 * Amount of product available
 * @member {Number} available
 */
ProductQuantity.prototype['available'] = undefined;

/**
 * Amount of product allocated
 * @member {Number} allocated
 */
ProductQuantity.prototype['allocated'] = undefined;

/**
 * Amount of product pending
 * @member {Number} pending
 */
ProductQuantity.prototype['pending'] = undefined;

/**
 * Custom field used for store prioritization
 * @member {Number} ltd
 */
ProductQuantity.prototype['ltd'] = undefined;

/**
 * Absolute minimum quantity of this item that should be in stock at any time
 * @member {Number} floor
 */
ProductQuantity.prototype['floor'] = undefined;

/**
 * Quantity of this item the location wants to keep in stock to ensure stock isn't completely depleted
 * @member {Number} safetystock
 */
ProductQuantity.prototype['safetystock'] = undefined;






export default ProductQuantity;

