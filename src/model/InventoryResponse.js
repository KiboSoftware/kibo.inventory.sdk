/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InventoryResponse model module.
 * @module model/InventoryResponse
 * @version 5.0
 */
class InventoryResponse {
    /**
     * Constructs a new <code>InventoryResponse</code>.
     * Inventory Response
     * @alias module:model/InventoryResponse
     */
    constructor() { 
        
        InventoryResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InventoryResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InventoryResponse} obj Optional instance to populate.
     * @return {module:model/InventoryResponse} The populated <code>InventoryResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InventoryResponse();

            if (data.hasOwnProperty('locationName')) {
                obj['locationName'] = ApiClient.convertToType(data['locationName'], 'String');
            }
            if (data.hasOwnProperty('locationCode')) {
                obj['locationCode'] = ApiClient.convertToType(data['locationCode'], 'String');
            }
            if (data.hasOwnProperty('tenantID')) {
                obj['tenantID'] = ApiClient.convertToType(data['tenantID'], 'Number');
            }
            if (data.hasOwnProperty('onHand')) {
                obj['onHand'] = ApiClient.convertToType(data['onHand'], 'Number');
            }
            if (data.hasOwnProperty('available')) {
                obj['available'] = ApiClient.convertToType(data['available'], 'Number');
            }
            if (data.hasOwnProperty('allocated')) {
                obj['allocated'] = ApiClient.convertToType(data['allocated'], 'Number');
            }
            if (data.hasOwnProperty('pending')) {
                obj['pending'] = ApiClient.convertToType(data['pending'], 'Number');
            }
            if (data.hasOwnProperty('partNumber')) {
                obj['partNumber'] = ApiClient.convertToType(data['partNumber'], 'String');
            }
            if (data.hasOwnProperty('upc')) {
                obj['upc'] = ApiClient.convertToType(data['upc'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('blockAssignment')) {
                obj['blockAssignment'] = ApiClient.convertToType(data['blockAssignment'], 'Boolean');
            }
            if (data.hasOwnProperty('ltd')) {
                obj['ltd'] = ApiClient.convertToType(data['ltd'], 'Number');
            }
            if (data.hasOwnProperty('floor')) {
                obj['floor'] = ApiClient.convertToType(data['floor'], 'Number');
            }
            if (data.hasOwnProperty('safetyStock')) {
                obj['safetyStock'] = ApiClient.convertToType(data['safetyStock'], 'Number');
            }
            if (data.hasOwnProperty('distance')) {
                obj['distance'] = ApiClient.convertToType(data['distance'], 'Number');
            }
            if (data.hasOwnProperty('directShip')) {
                obj['directShip'] = ApiClient.convertToType(data['directShip'], 'Boolean');
            }
            if (data.hasOwnProperty('transferEnabled')) {
                obj['transferEnabled'] = ApiClient.convertToType(data['transferEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('pickup')) {
                obj['pickup'] = ApiClient.convertToType(data['pickup'], 'Boolean');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('currencyID')) {
                obj['currencyID'] = ApiClient.convertToType(data['currencyID'], 'Number');
            }
            if (data.hasOwnProperty('retailPrice')) {
                obj['retailPrice'] = ApiClient.convertToType(data['retailPrice'], 'Number');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * Location Name
 * @member {String} locationName
 */
InventoryResponse.prototype['locationName'] = undefined;

/**
 * Location Code
 * @member {String} locationCode
 */
InventoryResponse.prototype['locationCode'] = undefined;

/**
 * Tenant Identifier
 * @member {Number} tenantID
 */
InventoryResponse.prototype['tenantID'] = undefined;

/**
 * The quantity the location has in its possession
 * @member {Number} onHand
 */
InventoryResponse.prototype['onHand'] = undefined;

/**
 * The quantity the location has that are available for purchase
 * @member {Number} available
 */
InventoryResponse.prototype['available'] = undefined;

/**
 * The quantity the location has that are already allocated.
 * @member {Number} allocated
 */
InventoryResponse.prototype['allocated'] = undefined;

/**
 * The quantity the location has that are pending.
 * @member {Number} pending
 */
InventoryResponse.prototype['pending'] = undefined;

/**
 * Part/Product Number
 * @member {String} partNumber
 */
InventoryResponse.prototype['partNumber'] = undefined;

/**
 * Universal Product Code
 * @member {String} upc
 */
InventoryResponse.prototype['upc'] = undefined;

/**
 * Stock Keeping Unit
 * @member {String} sku
 */
InventoryResponse.prototype['sku'] = undefined;

/**
 * Whether or not the product is blocked for assignment
 * @member {Boolean} blockAssignment
 */
InventoryResponse.prototype['blockAssignment'] = undefined;

/**
 * Custom field used for store prioritization
 * @member {Number} ltd
 */
InventoryResponse.prototype['ltd'] = undefined;

/**
 * Absolute minimum quantity of this item that should be in stock at any time
 * @member {Number} floor
 */
InventoryResponse.prototype['floor'] = undefined;

/**
 * Quantity of this item the location wants to keep in stock to ensure stock isn't completely depleted
 * @member {Number} safetyStock
 */
InventoryResponse.prototype['safetyStock'] = undefined;

/**
 * The distance in miles from this location to the item's destination
 * @member {Number} distance
 */
InventoryResponse.prototype['distance'] = undefined;

/**
 * Whether this location can ship to a consumer
 * @member {Boolean} directShip
 */
InventoryResponse.prototype['directShip'] = undefined;

/**
 * Whether the location can ship to another location (store), thus restocking that location.
 * @member {Boolean} transferEnabled
 */
InventoryResponse.prototype['transferEnabled'] = undefined;

/**
 * Whether a consumer can pick up product at this location (store)
 * @member {Boolean} pickup
 */
InventoryResponse.prototype['pickup'] = undefined;

/**
 * The country code of this location
 * @member {String} countryCode
 */
InventoryResponse.prototype['countryCode'] = undefined;

/**
 * The currency identifier for the retailPrice
 * @member {Number} currencyID
 */
InventoryResponse.prototype['currencyID'] = undefined;

/**
 * The price of the product at this location
 * @member {Number} retailPrice
 */
InventoryResponse.prototype['retailPrice'] = undefined;

/**
 * List of Inventory Attributes
 * @member {Array.<String>} attributes
 */
InventoryResponse.prototype['attributes'] = undefined;






export default InventoryResponse;

