/**
 * Inventory
 * Swagger JSON for inventory apis
 *
 * The version of the OpenAPI document: 5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ItemQuantity from './ItemQuantity';
import RequestLocation from './RequestLocation';

/**
 * The InventoryRequest model module.
 * @module model/InventoryRequest
 * @version 5.0
 */
class InventoryRequest {
    /**
     * Constructs a new <code>InventoryRequest</code>.
     * Request for getting Inventory
     * @alias module:model/InventoryRequest
     * @param type {module:model/InventoryRequest.TypeEnum} Inventory Request Type Enum
     * @param items {Array.<module:model/ItemQuantity>} List of Items to search on
     */
    constructor(type, items) { 
        
        InventoryRequest.initialize(this, type, items);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, items) { 
        obj['type'] = type;
        obj['items'] = items;
    }

    /**
     * Constructs a <code>InventoryRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InventoryRequest} obj Optional instance to populate.
     * @return {module:model/InventoryRequest} The populated <code>InventoryRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InventoryRequest();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [ItemQuantity]);
            }
            if (data.hasOwnProperty('requestLocation')) {
                obj['requestLocation'] = RequestLocation.constructFromObject(data['requestLocation']);
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('locationWhitelist')) {
                obj['locationWhitelist'] = ApiClient.convertToType(data['locationWhitelist'], ['String']);
            }
            if (data.hasOwnProperty('locationPriorityList')) {
                obj['locationPriorityList'] = ApiClient.convertToType(data['locationPriorityList'], ['String']);
            }
            if (data.hasOwnProperty('locationBlacklist')) {
                obj['locationBlacklist'] = ApiClient.convertToType(data['locationBlacklist'], ['String']);
            }
            if (data.hasOwnProperty('ignoreSafetyStock')) {
                obj['ignoreSafetyStock'] = ApiClient.convertToType(data['ignoreSafetyStock'], 'Boolean');
            }
            if (data.hasOwnProperty('includeNegativeInventory')) {
                obj['includeNegativeInventory'] = ApiClient.convertToType(data['includeNegativeInventory'], 'Boolean');
            }
            if (data.hasOwnProperty('directShip')) {
                obj['directShip'] = ApiClient.convertToType(data['directShip'], 'Boolean');
            }
            if (data.hasOwnProperty('transferEnabled')) {
                obj['transferEnabled'] = ApiClient.convertToType(data['transferEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('pickup')) {
                obj['pickup'] = ApiClient.convertToType(data['pickup'], 'Boolean');
            }
            if (data.hasOwnProperty('includeInAggregateExport')) {
                obj['includeInAggregateExport'] = ApiClient.convertToType(data['includeInAggregateExport'], 'Boolean');
            }
            if (data.hasOwnProperty('includeInLocationExport')) {
                obj['includeInLocationExport'] = ApiClient.convertToType(data['includeInLocationExport'], 'Boolean');
            }
            if (data.hasOwnProperty('excludeBlockedAssignment')) {
                obj['excludeBlockedAssignment'] = ApiClient.convertToType(data['excludeBlockedAssignment'], 'Boolean');
            }
            if (data.hasOwnProperty('includeAttributes')) {
                obj['includeAttributes'] = ApiClient.convertToType(data['includeAttributes'], 'Boolean');
            }
            if (data.hasOwnProperty('sortByEnum')) {
                obj['sortByEnum'] = ApiClient.convertToType(data['sortByEnum'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Inventory Request Type Enum
 * @member {module:model/InventoryRequest.TypeEnum} type
 */
InventoryRequest.prototype['type'] = undefined;

/**
 * List of Items to search on
 * @member {Array.<module:model/ItemQuantity>} items
 */
InventoryRequest.prototype['items'] = undefined;

/**
 * @member {module:model/RequestLocation} requestLocation
 */
InventoryRequest.prototype['requestLocation'] = undefined;

/**
 * The maximum number of results to return, defaults to 100 for most
 * @member {Number} limit
 */
InventoryRequest.prototype['limit'] = undefined;

/**
 * List of location codes that are allowed to be included in results
 * @member {Array.<String>} locationWhitelist
 */
InventoryRequest.prototype['locationWhitelist'] = undefined;

/**
 * List of location codes that should be returned before all others, preventing them from being excluded by limit
 * @member {Array.<String>} locationPriorityList
 */
InventoryRequest.prototype['locationPriorityList'] = undefined;

/**
 * List of location codes that are NOT allowed to be included in results
 * @member {Array.<String>} locationBlacklist
 */
InventoryRequest.prototype['locationBlacklist'] = undefined;

/**
 * Whether to ignore the safety stock buffer put in place
 * @member {Boolean} ignoreSafetyStock
 */
InventoryRequest.prototype['ignoreSafetyStock'] = undefined;

/**
 * Whether to allow items with negative inventory in the results
 * @member {Boolean} includeNegativeInventory
 */
InventoryRequest.prototype['includeNegativeInventory'] = undefined;

/**
 * Whether to limit results to locations that are shipping enabled
 * @member {Boolean} directShip
 */
InventoryRequest.prototype['directShip'] = undefined;

/**
 * Filter results by locations that have transfer enabled (true) or don't (false)
 * @member {Boolean} transferEnabled
 */
InventoryRequest.prototype['transferEnabled'] = undefined;

/**
 * Filter results by locations that have finderbot enabled (true) or don't (false)
 * @member {Boolean} pickup
 */
InventoryRequest.prototype['pickup'] = undefined;

/**
 * Filter results by locations that have aggregate export enabled (true) or don't (false)
 * @member {Boolean} includeInAggregateExport
 */
InventoryRequest.prototype['includeInAggregateExport'] = undefined;

/**
 * Filter results by locations that have physical storefronts (true) or don't (false)
 * @member {Boolean} includeInLocationExport
 */
InventoryRequest.prototype['includeInLocationExport'] = undefined;

/**
 * Filter out results that are blocked from assignment (at the product/location level) 
 * @member {Boolean} excludeBlockedAssignment
 */
InventoryRequest.prototype['excludeBlockedAssignment'] = undefined;

/**
 * Flag to include attributes or not
 * @member {Boolean} includeAttributes
 */
InventoryRequest.prototype['includeAttributes'] = undefined;

/**
 * What to sort the inventory results by. Only used for GetInventoryByLocation calls (locationCode must be set)
 * @member {module:model/InventoryRequest.SortByEnumEnum} sortByEnum
 */
InventoryRequest.prototype['sortByEnum'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
InventoryRequest['TypeEnum'] = {

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL",

    /**
     * value: "PARTIAL"
     * @const
     */
    "PARTIAL": "PARTIAL",

    /**
     * value: "ANY"
     * @const
     */
    "ANY": "ANY",

    /**
     * value: "ALL_STORES"
     * @const
     */
    "ALL_STORES": "ALL_STORES"
};


/**
 * Allowed values for the <code>sortByEnum</code> property.
 * @enum {String}
 * @readonly
 */
InventoryRequest['SortByEnumEnum'] = {

    /**
     * value: "ON_HAND"
     * @const
     */
    "ON_HAND": "ON_HAND",

    /**
     * value: "AVAILABLE"
     * @const
     */
    "AVAILABLE": "AVAILABLE",

    /**
     * value: "ALLOCATED"
     * @const
     */
    "ALLOCATED": "ALLOCATED",

    /**
     * value: "PART_NUMBER"
     * @const
     */
    "PART_NUMBER": "PART_NUMBER",

    /**
     * value: "PRODUCT_ID"
     * @const
     */
    "PRODUCT_ID": "PRODUCT_ID"
};



export default InventoryRequest;

